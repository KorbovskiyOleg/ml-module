import pandas as pd
from sqlalchemy import create_engine
from dotenv import load_dotenv
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import joblib
import os

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º .env ---
load_dotenv()

DB_USER = os.getenv("DB_USER")
DB_PASS = os.getenv("DB_PASS")
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = os.getenv("DB_PORT", "5432")
DB_NAME = os.getenv("DB_NAME")
DB_SCHEMA = os.getenv("DB_SCHEMA", "ml_data")

# --- –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ ---
engine = create_engine(
    f"postgresql+psycopg2://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}",
    connect_args={"options": f"-csearch_path={DB_SCHEMA}"}
)

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ ---
def load_zoo_data():
    query = "SELECT * FROM zoo_training_data;"
    df = pd.read_sql(query, engine)
    print(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã zoo_training_data")

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    print(f"üìä –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")

    # –£–¥–∞–ª—è–µ–º –Ω–µ—á–∏—Å–ª–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É animal_name
    if "animal_name" in df.columns:
        df = df.drop(columns=["animal_name"])

    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É —Ç–µ–±—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü ‚Äî —ç—Ç–æ –∫–ª–∞—Å—Å –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (label)
    label_col = "animal_type"  # –µ—Å–ª–∏ —É —Ç–µ–±—è –æ–Ω –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ-–¥—Ä—É–≥–æ–º—É ‚Äî –ø–æ–ø—Ä–∞–≤—å!
    x = df.drop(columns=[label_col])
    y = df[label_col]

    return x, y

# --- –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å ---
def train_zoo_model(x, y):
    x_train, x_test, y_train, y_test = train_test_split(
        x, y, test_size=0.3, random_state=42
    )

    model = RandomForestClassifier(
        n_estimators=100, random_state=42, n_jobs=-1
    )
    model.fit(x_train, y_train)

    y_pred = model.predict(x_test)
    acc = accuracy_score(y_test, y_pred)

    print(f"‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {acc:.3f}")
    print("üîç –û—Ç—á—ë—Ç –æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:\n", classification_report(y_test, y_pred))

    os.makedirs("models", exist_ok=True)
    joblib.dump(model, "models/zoo_model.pkl")
    print("üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ models/zoo_model.pkl")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
def main():
    x, y = load_zoo_data()
    train_zoo_model(x, y)

if __name__ == "__main__":
    main()
